{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","loading","forecasters","_this2","fetch","then","response","json","setState","react_default","a","createElement","CircularProgress_default","Paper_default","className","classes","root","container","Typography_default","variant","typography","Table_default","table","TableHead_default","TableRow_default","TableCell_default","align","TableBody_default","map","_ref","id","name","score","key","component","scope","ExpansionPanel_default","expansionPanel","ExpansionPanelSummary_default","expandIcon","ExpandMore_default","ExpansionPanelDetails_default","href","Component","withStyles","theme","objectSpread","mixins","gutters","paddingTop","spacing","unit","paddingBottom","maxWidth","marginBottom","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f408d437.chunk.js","sourcesContent":["import \"./App.scss\";\nimport React, { Component } from \"react\";\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport Typography from \"@material-ui/core/Typography\";\nimport ExpansionPanel from \"@material-ui/core/ExpansionPanel\";\nimport ExpansionPanelSummary from \"@material-ui/core/ExpansionPanelSummary\";\nimport ExpansionPanelDetails from \"@material-ui/core/ExpansionPanelDetails\";\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n    maxWidth: \"70%\"\n  },\n  typography: {\n    marginBottom: theme.spacing.unit * 2\n  },\n  table: {\n    marginBottom: theme.spacing.unit * 2\n  }\n});\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      forecasters: []\n    };\n  }\n\n  componentDidMount() {\n    fetch(\"https://sheetsu.com/apis/v1.0su/185773bcf26e\")\n      .then(response => {\n        return response.json();\n      })\n      .then(json => {\n        this.setState({ forecasters: json, loading: false });\n      });\n  }\n\n  render() {\n    if (this.state.loading) {\n      return <CircularProgress />;\n    }\n    return (\n      <Paper className={this.props.classes.root}>\n        <div className={this.props.classes.container}>\n          <Typography variant=\"h2\" className={this.props.classes.typography}>\n            Top Product Forecasters\n          </Typography>\n          <Table className={this.props.classes.table}>\n            <TableHead>\n              <TableRow>\n                <TableCell>Name</TableCell>\n                <TableCell align=\"right\">Brier Score</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {this.state.forecasters.map(({ id, name, score }) => (\n                <TableRow key={id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {name}\n                  </TableCell>\n                  <TableCell align=\"right\">{score}</TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n          <Typography variant=\"h2\" className={this.props.classes.typography}>\n            FAQ\n          </Typography>\n          <ExpansionPanel className={this.props.classes.expansionPanel}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h7\">What's a product forecaster?</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                Product forecasters make predictions about how product changes\n                will affect that product's success. If you're a product manager\n                or entrepreneur, you're a product forecaster. If you've ever\n                complained about the macbook's touchbar and suggested that the\n                product change will negatively affect their sales, you're a\n                product forecaster.\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n          <ExpansionPanel className={this.props.classes.expansionPanel}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h7\">What's a brier score?</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                We never know for certain whether product changes will make a\n                product better or worse, so we have to make probabilistic\n                predictions. A brier score is a way to score probabilistic\n                predictions.\n                <a href=\"https://en.wikipedia.org/wiki/Brier_score\">\n                  The wikipedia entry on it\n                </a>{\" \"}\n                is pretty good. The lower the score, the more impressive it is.\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n          <ExpansionPanel className={this.props.classes.expansionPanel}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h7\">But y tho?</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                Product forecasting is hard. The only way to get better is to\n                practice. More{\" \"}\n                <a href=\"https://www.philosophicalhacker.com/post/cassandra-project/\">\n                  here\n                </a>\n                .\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n          <ExpansionPanel className={this.props.classes.expansionPanel}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h7\">\n                What are some example product predictions?\n              </Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                Because their features and revenue numbers are well known, we\n                typically ask about product-related revenue at public companies.\n                Here's an example question: \"Will the percent change in iPhone\n                revenue growth from Q1 2018 to Q1 2019 be greater than the\n                percent change in revenue growth from Q4 2017 to Q4 2018?\" The\n                idea here is for the forecaster to consider the recent product\n                changes and to use those changes, along with other things they\n                know about the company, to answer the question. You can see a\n                full list on the questions sheet of{\" \"}\n                <a href=\"https://docs.google.com/spreadsheets/d/1aeaDct4IsnFfuppNZPgqSZ5f12ssJv7NIahKlsFChlc/edit?usp=sharing\">\n                  this spreadsheet\n                </a>\n                .\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n          <ExpansionPanel className={this.props.classes.expansionPanel}>\n            <ExpansionPanelSummary expandIcon={<ExpandMoreIcon />}>\n              <Typography variant=\"h7\">How do I participate?</Typography>\n            </ExpansionPanelSummary>\n            <ExpansionPanelDetails>\n              <Typography>\n                The process for participating is admittedly janky. This page is\n                backed by a google sheet (and sheetsu), so for now, you'll have\n                to add a comment to{\" \"}\n                <a href=\"https://docs.google.com/spreadsheets/d/1aeaDct4IsnFfuppNZPgqSZ5f12ssJv7NIahKlsFChlc/edit?usp=sharing\">\n                  this spreadsheet\n                </a>{\" \"}\n                on the forecasters sheet that contains your name. Then you'll\n                add another comment to the forecasters tab with your forecast.\n              </Typography>\n            </ExpansionPanelDetails>\n          </ExpansionPanel>\n        </div>\n      </Paper>\n    );\n  }\n}\n\nexport default withStyles(styles)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}